worker_processes auto;
pid /var/cache/nginx/nginx.pid;

events {
}


http {
  include /var/nginxconf/upstream.conf;

  # Define a custom log format, where we can display the logged in user
  log_format sso_logs '$remote_addr - $auth_resp_x_vouch_user [$time_local] '
  '"$request" $status $body_bytes_sent '
  '"$http_referer" "$http_user_agent" '
  '$proxy_host $upstream_addr $request_time';

  include /etc/nginx/mime.types;

  server {
    listen 8080;

    # Assign the log format to our server
    access_log /var/log/nginx/access.log sso_logs;

    root /var/www/html;

    index index.html;

    set $vouch_host http://vp;

    location / {
      auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;
      proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;
      try_files $uri /index.html;
    }

    location /health {
      auth_request off;
      return 200 OK;
    }

    # Any request to this server will first be sent to this URL
    auth_request /auth/validate;
    # auth_request_set $auth_user_groups $upstream_http_x_vouch_idp_claims_groups;
    # auth_request_set $auth_user_name $upstream_http_x_vouch_idp_claims_given_name;
    # add_header userEmail $auth_user;
    # add_header usergr $auth_user_groups;
    # add_header usern $auth_user_name;

    # Proxy to your Vouch instance
    location ~ /auth {
      add_header X-uri "$uri";
      auth_request off;
      # We need to pass /auth/login only as /login to vouch
      # However, there are requests containing /auth that can be handled by vouch, so don't touch those
      rewrite /auth/login /login break;
      proxy_redirect off;

      proxy_pass $vouch_host;
      proxy_set_header Content-Length "";
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # https://github.com/vouch/vouch-proxy#vouch-proxy-in-a-path
    location = /auth/validate {
      auth_request off;

      # for CORS preflight requests, just return 200 since a preflight request does not contain a cookie
      # https://stackoverflow.com/questions/41760128/cookies-not-sent-on-options-requests
      # Used for API proxying
      if ($request_method = 'OPTIONS') {
        return 200;
      }

      # This address is where Vouch will be listening on
      proxy_pass $vouch_host/validate;
      proxy_pass_request_body off; # no need to send the POST body

      proxy_set_header Content-Length "";
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

      # these return values are passed to the @error401 call
      auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
      auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
      auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
    }

    error_page 401 = @error401;

    # If the user is not logged in, redirect them to Vouch's login URL
    location @error401 {
      # We need this trick, because the domain is served by Istio using HTTPS
      # but nginx is actually running with HTTP, so $scheme is not what we need.
      set $httpProto 'https';
      if ($host = 'localhost') {
        set $httpProto 'http';
      }

      return 302 $httpProto://$http_host/auth/login?url=$httpProto://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
    }
  }
}
